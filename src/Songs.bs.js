// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Belt_SortArray = require("bs-platform/lib/js/belt_SortArray.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Data$ReactTemplate = require("./Data.bs.js");
var Utils$ReactTemplate = require("./Utils.bs.js");
var Select$ReactTemplate = require("./Select.bs.js");
var SongTable$ReactTemplate = require("./SongTable.bs.js");

require("./Songs.css");

var component = ReasonReact.reducerComponentWithRetainedProps("Songs");

function flippedSort(param, param$1) {
  return Utils$ReactTemplate.flip(Belt_SortArray.stableSortBy, param, param$1);
}

function sortFn(getter) {
  var tupleGetter = function (param) {
    return Curry._1(getter, param[1]);
  };
  return (function (param) {
      return flippedSort((function (a, b) {
                    var i = Caml_obj.caml_compare(tupleGetter(a), tupleGetter(b));
                    if (i !== 0) {
                      return i;
                    } else {
                      return Caml_primitive.caml_string_compare(a[1][/* id */0], b[1][/* id */0]);
                    }
                  }), param);
    });
}

function sortSongsByStr(sortBy, songs) {
  var getStr;
  var exit = 0;
  if (sortBy !== 0) {
    switch (sortBy - 1 | 0) {
      case 0 : 
          getStr = (function (song) {
              return song[/* display */2][/* title */0];
            });
          break;
      case 1 : 
          exit = 1;
          break;
      case 2 : 
          getStr = (function (song) {
              return song[/* display */2][/* albumName */2];
            });
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    getStr = (function (song) {
        return $$String.concat("", song[/* display */2][/* artists */1]);
      });
  }
  return sortFn(getStr)(songs);
}

function sortSongsByValue(value, songs) {
  var sort;
  switch (value) {
    case 0 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* popularity */0];
              }));
        break;
    case 1 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* danceability */1];
              }));
        break;
    case 2 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* energy */2];
              }));
        break;
    case 3 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* speechiness */3];
              }));
        break;
    case 4 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* acousticness */4];
              }));
        break;
    case 5 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* instrumentalness */5];
              }));
        break;
    case 6 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* liveness */6];
              }));
        break;
    case 7 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* valence */7];
              }));
        break;
    case 8 : 
        sort = sortFn((function (song) {
                return song[/* attrs */1][/* tempo */8];
              }));
        break;
    case 9 : 
        sort = sortFn((function (song) {
                return -song[/* attrs */1][/* loudness */9];
              }));
        break;
    
  }
  return $$Array.mapi((function (rank, param) {
                return /* tuple */[
                        rank,
                        param[1]
                      ];
              }), Belt_Array.reverse(Curry._1(sort, songs)));
}

function make(songs, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              if (self[/* retainedProps */2] !== songs) {
                return /* record */[
                        /* value : Popularity */0,
                        /* sortBy : Value */0,
                        /* songs */sortSongsByValue(/* Popularity */0, $$Array.mapi((function (i, song) {
                                    return /* tuple */[
                                            i,
                                            song
                                          ];
                                  }), songs))
                      ];
              } else {
                return self[/* state */1];
              }
            }),
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var selectOptions = $$Array.map((function (value) {
                      return /* record */[
                              /* key */Data$ReactTemplate.getValueName(value),
                              /* optionType */value,
                              /* text */Data$ReactTemplate.getValueName(value),
                              /* onClick */(function (_event, value) {
                                  return Curry._1(self[/* send */3], /* UpdateValue */Block.__(0, [value]));
                                })
                            ];
                    }), /* array */[
                    /* Popularity */0,
                    /* Danceability */1,
                    /* Energy */2,
                    /* Speechiness */3,
                    /* Acousticness */4,
                    /* Instrumentalness */5,
                    /* Liveness */6,
                    /* Valence */7,
                    /* Tempo */8,
                    /* Loudness */9
                  ]);
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Select$ReactTemplate.make(undefined, selectOptions, /* array */[])), React.createElement("div", {
                              className: "TableGrid"
                            }, ReasonReact.element(undefined, undefined, SongTable$ReactTemplate.make(self[/* state */1][/* songs */2], self[/* state */1][/* value */0], (function (sortBy, _event) {
                                        return Curry._1(self[/* send */3], /* SortBy */Block.__(1, [sortBy]));
                                      }), /* array */[]))));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* value : Popularity */0,
                      /* sortBy : Value */0,
                      /* songs */sortSongsByValue(/* Popularity */0, $$Array.mapi((function (i, song) {
                                  return /* tuple */[
                                          i,
                                          song
                                        ];
                                }), songs))
                    ];
            }),
          /* retainedProps */songs,
          /* reducer */(function (action, state) {
              if (action.tag) {
                var sortBy = action[0];
                if (sortBy === state[/* sortBy */1]) {
                  return /* Update */Block.__(0, [/* record */[
                              /* value */state[/* value */0],
                              /* sortBy */state[/* sortBy */1],
                              /* songs */Belt_Array.reverse(state[/* songs */2])
                            ]]);
                } else if (sortBy !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* value */state[/* value */0],
                              /* sortBy */sortBy,
                              /* songs */sortSongsByStr(sortBy, state[/* songs */2])
                            ]]);
                } else {
                  var value = state[/* value */0];
                  return /* Update */Block.__(0, [/* record */[
                              /* value */value,
                              /* sortBy : Value */0,
                              /* songs */sortSongsByValue(value, state[/* songs */2])
                            ]]);
                }
              } else {
                var value$1 = action[0];
                if (value$1 === state[/* value */0]) {
                  return /* NoUpdate */0;
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* value */value$1,
                              /* sortBy : Value */0,
                              /* songs */sortSongsByValue(value$1, state[/* songs */2])
                            ]]);
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.flippedSort = flippedSort;
exports.sortFn = sortFn;
exports.sortSongsByStr = sortSongsByStr;
exports.sortSongsByValue = sortSongsByValue;
exports.make = make;
/*  Not a pure module */
